\documentclass[a4paper,10pt]{report}
\usepackage[spanish]{babel}
\usepackage[latin1]{inputenc}
\usepackage{svn}
\usepackage{graphicx}

% Title Page
\title{Agentes \emph{Ping} y \emph{Pong} con \textbf{Mozart/Oz}}
\author{Juan A. Suárez Romero}


\begin{document}
\SVNdate $Date$
\SVN $Revision$
\maketitle

\begin{abstract}
El objetivo de este proyecto es medir el rendimiento de los agentes empleando
la plataforma de comunicación desarrollada para el sistema \textbf{Mozart/Oz},
que permite comunicar agentes mediante KQML. Se presenta la filosofía de
funcionamiento de dicha plataforma, y cómo se ha medido su rendimiento en base a
unos agentes de tipo \emph{ping} y \emph{pong}.
\end{abstract}

\section{Objetivos del proyecto}
El objetivo del proyecto es medir el rendimiento de la plataforma desarrollada
para \textbf{Mozart/Oz} en función del número de agentes que contiene. La idea
consiste en crear un agente que haga un ping y otro agente que conteste con un
pong a dicho agente, y realizar varios ping y pong para medir el tiempo medio de
ida y vuelta (RTT, \emph{Round Trip Time}) de los mensajes. Se irá incrementando
el número de parejas para ver cómo afecta al RTT de los mensajes. Así, para
\emph{n} parejas el RTT será la media de los RTTs de los mensajes de cada
pareja.

En orden a que las medidas sean correctas, cada pareja sólo comenzará a tomar
las medidas cuando detecte que todos las parejas han sido creadas. No obstante,
aunque no comiencen las medidas, si comenzarán a transmitir y recibir los
mensajes tan pronto como se vayan creando, y continuarán asi hasta el final de
las pruebas.


\section{Descripción de la plataforma para \textbf{Mozart/Oz}}
La plataforma que hemos empleado permite que agentes desarrollados en el
lenguaje \textbf{Mozart/Oz}\cite{mozart} puedan comunicarse entre sí
utilizando el lenguaje de comunicación KQML\cite{kqml}.


\subsection{Comunicación de los agentes}
La comunicación entre los agentes se lleva a cabo a través de la plataforma.
Para poder usar este y otros servicios de la plataforma un agente debe
registrarse con un nombre. Este nombre deberá ser único para cada agente
registrado a la plataforma. Una vez registrado, se le proveerá de una
\emph{fachada} a través de la cual el agente se comunicará con la plataforma.
Así, para enviar un mensaje a otro agente deberá indicar el nombre de registro
del agente destino y el mensaje a enviar, haciéndolo a través de dicha fachada.

Además de los nombres de los agentes registrados en una plataforma, la propia
plataforma tiene un nombre que se le asigna al lanzarla. Este nombre sólo es
necesario cuando un agente desea enviar un mensaje a otro agente que está en
una plataforma distinta de la suya. Así, si tenemos dos agentes registrados
como \emph{ping1} y \emph{pong1} en la plataforma \emph{plataforma1} y un
agente registrado como \emph{pong1} en la plataforma \emph{plataforma2}, si el
agente \emph{ping1} quiere enviar un mensaje a éste último agente deberá
indicar como destinatario el agente \emph{pong1@plataforma2}, mientras que si
quiere enviarlo al agente de su propia plataforma sólo tendría que indicar
\emph{pong1}.

Otra de las características en la comunicación en esta plataforma es que para
poder enviar un mensaje a una agente primero hay que establecer una
conversación con él; posteriormente todos los mensajes irán dentro de dicha
conversación (o de una nueva si se desea).

Un aspecto importante es que la plataforma no provee de ninguna clase a partir
de la cual heredar nuestros agentes. Más bien, en el registro es necesario
indicarle una función que la plataforma invocará cada vez que llegue un mensaje.

Se puede ver la relación entre los agentes y la plataforma en la figura
\ref{fig:comunicacion}.

\begin{figure}
	\centering
	\includegraphics[width=6cm]{comunicacionAgentes.eps}
	\caption{Relación entre los agentes y la plataforma}
	\label{fig:comunicacion}
\end{figure}



\section{Diseño del programa}
\subsection{Agentes \emph{Ping}}
Como hemos comentado al principio, los agentes \emph{ping} son los encargados
de medir el rendimiento del sistema enviando y recibiendo los mensajes ping y
pong. Sin embargo, no comienzan sus
medidas hasta que todos ellos estén listos. Para ello los agentes comparten una
clase, \emph{Contador}, que permite su sincronización. Así, cuando un agente
está listo para realizar sus medidas, incrementa este contador y comienzan a
enviar y recibir los mensajes pong. Cada cierto número de envíos, comprueban si
el Contador ha llegado al tope, esto es, al número total de agentes que tiene
que haber. Si este es el caso, entonces es cuando comienza la medida. Una vez
que ha finalizado, y para evitar que la máquina quede descargarda y desvirtuar
así la medida, cada agente decrementa el contador y sigue enviando y recibiendo
mensajes sin medirlos, y comprobando de vez en cuando si el contador ha llegado
a cero. Este caso ocurrirá cuando todos los agentes hayan decrementado
respectivamente una vez el contador, esto es, cuando hayan finalizado sus
medidas. En este momento es cuando el programa finalizará. Este proceso se
encuentra esquematizado en las figuras \ref{fig:actividadPing} y
\ref{fig:estadoEnvio}. Nótese que en esta última las fases de \texttt{Iniciar
medida} y \texttt{Finalizar medida} sólo tienen sentido cuando se está midiendo
los tiempos.

\begin{figure}
	\centering
	\includegraphics[width=6cm]{estadoEnvios.eps}
	\caption{Fases de un agente \emph{ping}}
	\label{fig:actividadPing}
\end{figure}

\begin{figure}
	\centering
	\includegraphics[width=6cm]{estadoPing.eps}
	\caption{Fases en el envío de un mensaje}
	\label{fig:estadoEnvio}
\end{figure}


\subsection{Agentes \emph{Pong}}
Estos agentes son más sencillos de de diseñar. Su único objetivo es permanecer
a la escucha de mensajes, y cuando se reciba uno se conteste al agente emisor.
Se puede ver la actividad de estos agentes en la figura \ref{fig:estadoPong}.

\begin{figure}
	\centering
	\includegraphics[width=6cm]{estadoPong.eps}
	\caption{Actividad de un agente \emph{pong}}
	\label{fig:estadoPong}
\end{figure}


\subsection{Funcionamiento global}
Cada agente \emph{ping} recibe un identificador numérico, que va desde 1 hasta
el número total de agentes \emph{ping} que se creen. De igual forma se hace con
los agentes \emph{pong}, de forma que el agente \emph{ping i} sólo se comunicará
con el agente \emph{pong i} correspondiente. Así, primero se crean los agentes
\emph{pong} y posteriormente los agentes \emph{ping}.

A la hora de hacer las medidas, hemos posibilitado que o bien todos los agentes
residan dentro de la misma máquina virtual, como que estén en máquinas
separadas: la plataforma en una máquina virtual, todos los agentes \emph{ping}
en otra y todos los agentes
\emph{pong} en otra. Por ello se han creado tres clases nuevas: \emph{Cliente},
que lanza tantos agentes \emph{ping} como se indique, \emph{Servidor}, que lanza
tantos agentes \emph{pong} como se indique, y \emph{ClienteyServidor}, que lanza
tantas parejas \emph{ping} y \emph{pong} como se indique dentro de la misma
máquina virtual. Se puede ver en la figura \ref{fig:clases}.

\begin{figure}
	\centering
	\includegraphics[width=6cm]{diagramaClases.eps}
	\caption{Diagrama de clases del proyecto}
	\label{fig:clases}
\end{figure}


Independientemente de si se ejecutan las pruebas en una o en más máquinas
virtuales, el proceso siempre es el mismo: lanzar primero los agentes
\emph{pong}, luego los agentes \emph{ping} y realizar las medidas, tal y como se
ve en la figura \ref{fig:actividad}.

\begin{figure}
	\centering
	\includegraphics[width=6cm]{diagramaFases.eps}
	\caption{Fases en la ejecución del programa}
	\label{fig:actividad}
\end{figure}


En la figura \ref{fig:secuencia} podemos ver una secuencia de funcionamiento de
un agente \emph{ping} en conjunción con un agente \emph{pong}.

\begin{figure}
	\centering
	\includegraphics[width=12cm]{secuenciaFuncionamiento.eps}
	\caption{Funcionamiento de un agente \emph{ping}}
	\label{fig:secuencia}
\end{figure}


\section{Carga de la máquina}
En la sección anterior hemos descrito los agentes que hemos empleado para medir
el rendimiento de la plataforma desarrollada para \textbf{Mozart/Oz}. En la
descripción hemos
indicado que los agentes \emph{ping} envían un mensaje y quedan esperando la
respuesta; de igual forma los agentes \emph{pong} esperan un mensaje y
contestan con una respuesta. En ambos casos el proceso se repite continuamente.

En un sistema real, los agentes no quedan simplemente esperando por la
respuesta a un mensaje, ni la respuesta es un simple mensaje, sino que mientras
esperan realizan alguna tarea, y la respuesta suele ser fruto de alguna
operación que se realiza.

Por ello se ha creado paralelamente a las clases \emph{PingAgent} y
\emph{PongAgent} (que se corresponde con los agentes mencionados antes) las
clases \emph{PingAgentLoad} y \emph{PongAgentLoad}. La diferencia entre los
agentes \emph{PingAgent} y \emph{PingAgentLoad} es que éste último ejecuta una
tarea entre el envío del mensaje y la espera por una respuesta (ver figura
\ref{fig:pingLoad}), mientras que la diferencia entre los agentes
\emph{PongAgent} y \emph{PongAgentLoad} es que éste último calcula la respuesta
en función de una tarea (ver figura \ref{fig:pongLoad}). En ambos casos se ha
aportado un módulo denominado \emph{FullLoad} con un procedimiento que carga la
máquina
durante el tiempo estipulado (en nuestro caso durante 1 segundo).

\begin{figure}
	\centering
	\includegraphics[width=6cm]{estadoPingLoad.eps}
	\caption{Tarea del agente \emph{PingAgentLoad}}
	\label{fig:pingLoad}
\end{figure}

\begin{figure}
	\centering
	\includegraphics[width=6cm]{estadoPongLoad.eps}
	\caption{Tarea del agente \emph{PongAgentLoad}}
	\label{fig:pongLoad}
\end{figure}

De igual forma, para poder ejecutar estos nuevos agentes se han creado, a
semejanza de antes, las clases \emph{ClienteLoad}, \emph{ServidorLoad} y
\emph{ClienteyServidorLoad}.


% Bibliography page
\bibliographystyle{plain} 
\bibliography{informe}

\end{document}          
